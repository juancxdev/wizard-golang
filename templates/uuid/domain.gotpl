package {{pkg .Table}}

import (
	"time"

	"github.com/asaskevich/govalidator"
)

// {{.Name}}  Model struct {{.Name}}
type {{.Name}}  struct {
        ID string `json:"id" db:"id" valid:"required,uuid"`
        {{range .Fields -}}
        {{ucc .Name}} {{mdlType .Type}} `json:"{{.Name}}" db:"{{.Name}}"{{if ne .Type "bool"}} valid:"required"{{end -}}`
        {{end -}}
        IsDeleted   bool         `json:"is_deleted" db:"is_deleted"`
        UserDeleter *string      `json:"user_deleter" db:"user_deleter"`
        DeletedAt   *time.Time   `json:"deleted_at" db:"deleted_at"`
        UserCreator string       `json:"user_creator" db:"user_creator"`
        CreatedAt   time.Time    `json:"created_at" db:"created_at"`
        UpdatedAt   time.Time    `json:"updated_at" db:"updated_at"`
}

func New{{.Name}}(id string,{{range .Fields -}} {{lcc .Name}} {{mdlType .Type}} ,{{end -}}) *{{.Name}} {
	return &{{.Name}}{
		ID:           id,
		{{range .Fields -}}
		{{ucc .Name}} : {{lcc .Name}},
		{{end -}}
		IsDeleted:    false,
	}
}

func (m *{{.Name}} ) valid() (bool, error) {
	result, err := govalidator.ValidateStruct(m)
	if err != nil {
		return result, err
	}
	return result, nil
}
