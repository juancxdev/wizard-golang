{{ $length := len .Fields -}}
package {{pkg .Table}}

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/jmoiron/sqlx"
	"{{index .PackageRoutes "package_name"}}/internal/models"
)

// Orcl estructura de conexi√≥n a la BD de Oracle
type orcl struct {
	DB   *sqlx.DB
	user *models.User
	TxID string
}

func new{{.Name}}OrclRepository(db *sqlx.DB, user *models.User, txID string) *orcl {
	return &orcl{
		DB:   db,
		user: user,
		TxID: txID,
	}
}

// Create registra en la BD
func (s *orcl) create(m *{{.Name}}) error {
    date := time.Now()
    m.UpdatedAt = date
    m.CreatedAt = date
	const osqlInsert = `INSERT INTO {{.Table}} (id ,{{range $i, $v := .Fields}}{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}}, created_at, updated_at)  VALUES (:id ,{{range $i, $v := .Fields}}:{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}},:created_at, :updated_at) `
	rs, err := s.DB.NamedExec(osqlInsert, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
    	return fmt.Errorf("ecatch:108")
    }
	return nil
}

// Update actualiza un registro en la BD
func (s *orcl) update(m *{{.Name}}) error {
    date := time.Now()
    m.UpdatedAt = date
	const osqlUpdate = `UPDATE {{.Table}} SET {{range $i, $v := .Fields}}{{.Name}} = :{{.Name}}, {{end -}}updated_at = :updated_at WHERE id = :id  `
	rs, err := s.DB.NamedExec(osqlUpdate, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
		return fmt.Errorf("ecatch:108")
	}
	return nil
}

// Delete elimina un registro de la BD
func (s *orcl) delete(id string) error {
	const osqlDelete = `DELETE FROM {{.Table}} WHERE id = :id `
	m := {{.Name}}{ID: id}
	rs, err := s.DB.NamedExec(osqlDelete, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
		return fmt.Errorf("ecatch:108")
	}
	return nil
}

// GetByID consulta un registro por su ID
func (s *orcl) getByID(id string) (*{{.Name}}, error) {
	const osqlGetByID = `SELECT id , {{range .Fields}}{{.Name}}, {{end -}}created_at, updated_at FROM {{.Table}} WHERE id = :1 `
	mdl := {{.Name}}{}
	err := s.DB.Get(&mdl, osqlGetByID, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return &mdl, err
	}
	return &mdl, nil
}

// GetAll consulta todos los registros de la BD
func (s *orcl) getAll() ([]*{{.Name}}, error) {
	var ms []*{{.Name}}
	const osqlGetAll = ` SELECT id , {{range .Fields}}{{.Name}}, {{end -}}created_at, updated_at FROM {{.Table}} `

	err := s.DB.Select(&ms, osqlGetAll)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return ms, err
	}
	return ms, nil
}
