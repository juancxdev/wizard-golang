{{ $length := len .Fields -}}
package {{pkg .Table}}

import (
	"fmt"

	"{{index .PackageRoutes "package_name"}}/internal/logger"
	"{{index .PackageRoutes "package_name"}}/internal/models"
)

type PortsServer{{.Name}} interface {
    Create{{.Name}}({{range $i, $v :=  .Fields -}} {{lcc .Name}} {{mdlType .Type}}{{if lt $i (dec $length)}}, {{end}}{{end -}} ) (*{{.Name}}, int, error)
    Update{{.Name}}(id int64{{range .Fields -}} ,{{lcc .Name}} {{mdlType .Type}} {{end -}} ) (*{{.Name}}, int, error)
    Delete{{.Name}}(id int64) (int, error)
    Get{{.Name}}ByID(id int64) (*{{.Name}}, int, error)
    GetAll{{.Name}}() ([]*{{.Name}}, error)
}

type service struct {
	repository Services{{.Name}}Repository
	user       *models.User
	txID       string
}


func New{{.Name}}Service(repository Services{{.Name}}Repository, user *models.User, TxID string) PortsServer{{.Name}} {
	return &service{repository: repository, user: user, txID: TxID}
}

func (s *service) Create{{.Name}}({{range $i, $v := .Fields -}} {{lcc .Name}} {{mdlType .Type}}{{if lt $i (dec $length)}}, {{end}}{{end -}} ) (*{{.Name}}, int, error) {
    m := NewCreate{{.Name}}({{range $i, $v := .Fields -}} {{lcc .Name}}{{if lt $i (dec $length)}}, {{end}} {{end -}})
   if valid, err := m.valid(); !valid {
   		logger.Error.Println(s.txID, " - don't meet validations:", err)
   		return m, 15, err
   	}

   	if err := s.repository.create(m); err != nil {
   	    if err.Error() == "ecatch:108" {
        	return m, 108, nil
        }
   		logger.Error.Println(s.txID, " - couldn't create {{.Name}} :", err)
   		return m, 3, err
   	}
   	return m, 29, nil
}

func (s *service) Update{{.Name}}(id int64{{range .Fields -}} ,{{lcc .Name}} {{mdlType .Type}} {{end -}} ) (*{{.Name}}, int, error) {
    m := New{{.Name}}(id{{range .Fields -}} ,{{lcc .Name}} {{end -}})
    if id == 0 {
        		logger.Error.Println(s.txID, " - don't meet validations:", fmt.Errorf("id is required"))
        		return m, 15, fmt.Errorf("id is required")
        	}
	if valid, err := m.valid(); !valid {
    		logger.Error.Println(s.txID, " - don't meet validations:", err)
    		return m, 15, err
    	}
    	if err := s.repository.update(m); err != nil {
    		logger.Error.Println(s.txID, " - couldn't update {{.Name}} :", err)
    		return m, 18, err
    	}
    	return m, 29, nil
    }

func (s *service) Delete{{.Name}}(id int64) (int, error) {
    if id == 0 {
        		logger.Error.Println(s.txID, " - don't meet validations:", fmt.Errorf("id is required"))
        		return 15, fmt.Errorf("id is required")
        	}

    	if err := s.repository.delete(id); err != nil {
    		if err.Error() == "ecatch:108" {
    			return 108, nil
    		}
    		logger.Error.Println(s.txID, " - couldn't update row:", err)
    		return 20, err
    	}
    	return 28, nil
}

func (s *service) Get{{.Name}}ByID(id int64) (*{{.Name}}, int, error) {
    if id == 0 {
        		logger.Error.Println(s.txID, " - don't meet validations:", fmt.Errorf("id is required"))
        		return nil, 15, fmt.Errorf("id is required")
        	}
    	m, err := s.repository.getByID(id)
    	if err != nil {
    		logger.Error.Println(s.txID, " - couldn`t getByID row:", err)
    		return nil, 22, err
    	}
    	return m, 29, nil
}

func (s *service) GetAll{{.Name}}() ([]*{{.Name}}, error) {
	return s.repository.getAll()
}
